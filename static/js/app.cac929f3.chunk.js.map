{"version":3,"sources":["hooks/useColorScheme.ts","constants/Colors.ts","components/Themed.tsx","firebase/Firebase.js","firebase/FirebaseWeb.js","screens/TabOneScreen.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/TabTwoScreen.tsx","navigation/BottomTabNavigator.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["useColorScheme","_useColorScheme","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","firebaseWeb","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","database","date","hours","getHours","minutes","getMinutes","ampm","Date","getDate","getMonth","getFullYear","path","data","a","async","ref","set","alert","type","action","orderByKey","on","dataUpdate","push","then","snap","key","send","this","e","TabOneScreen","useState","link","setLink","pass","setPass","account","setAccount","password","setPassword","name","setName","moreHistory","setMoreHistory","moreAccount","setMoreAccount","histories","setHistories","accounts","setAccounts","iconMoreHistory","setIconMoreHistory","iconMoreAccount","setIconMoreAccount","Copy","value","Clipboard","setString","getString","ScrollView","flex","styles","container","title","formView","TextInput","input","onChangeText","placeholder","maxLength","secureTextEntry","flexDirection","alignSelf","marginVertical","Button","onPress","Firebase","post","time","timeStamp","width","alignItems","TouchableOpacity","formHistory","listen","snapshot","val","arr","Object","values","console","log","AntDesign","size","marginLeft","fontSize","FlatList","flatListHistory","inverted","renderItem","item","window","open","keyExtractor","index","toString","borderWidth","separator","StyleSheet","create","justifyContent","minHeight","Dimensions","get","height","paddingLeft","button","marginHorizontal","fontWeight","MonoText","fontFamily","EditScreenInfo","getStartedContainer","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","handleHelpPress","helpLink","helpLinkText","WebBrowser","borderRadius","paddingHorizontal","lineHeight","textAlign","marginTop","paddingVertical","TabTwoScreen","BottomTab","createBottomTabNavigator","BottomTabNavigator","colorScheme","Navigator","initialRouteName","tabBarOptions","activeTintColor","Screen","component","TabOneNavigator","options","tabBarIcon","TabBarIcon","TabTwoNavigator","Ionicons","marginBottom","TabOneStack","createStackNavigator","headerTitle","TabTwoStack","prefixes","Linking","config","screens","Root","TabOne","TabTwo","NotFound","Navigation","NavigationContainer","linking","LinkingConfiguration","DarkTheme","DefaultTheme","RootNavigator","Stack","screenOptions","headerShown","App","isLoadingComplete","React","setLoadingComplete","SplashScreen","Font","font","require","warn","useCachedResources","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.cac929f3.chunk.js","sourcesContent":["import { ColorSchemeName, useColorScheme as _useColorScheme } from 'react-native';\n\n// The useColorScheme value is always either light or dark, but the built-in\n// type suggests that it can be null. This will not happen in practice, so this\n// makes it a bit easier to work with.\nexport default function useColorScheme(): NonNullable<ColorSchemeName> {\n  return _useColorScheme() as NonNullable<ColorSchemeName>;\n}\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import {FirebaseWeb} from \"../firebase/FirebaseWeb\";\r\nimport firebase from \"firebase\";\r\nconst firebaseWeb = FirebaseWeb.database();\r\nclass Firebase {\r\n    timeStamp (date){\r\n            var hours = date.getHours();\r\n            var minutes = date.getMinutes();\r\n            var ampm = hours >= 12 ? 'PM' : 'AM';\r\n            hours = hours % 12;\r\n            hours = hours ? hours : 12;\r\n            minutes = minutes < 10 ? '0' + minutes : minutes;\r\n            var strTime = hours + ':' + minutes + ' ' + ampm;\r\n            return strTime +' | '+ new Date().getDate()+ '/' + (new Date().getMonth()+ 1) + '/'+ + new Date().getFullYear();\r\n    }\r\n    async send (path, data){\r\n        try {\r\n            await firebaseWeb.ref(path).set(data);\r\n        }\r\n        catch(e){\r\n            alert(e);\r\n        }\r\n\r\n    }\r\n    async listen (path, type,action){\r\n        try {\r\n            await firebaseWeb.ref(path).orderByKey().on(type,action);\r\n        }\r\n        catch(e){\r\n            alert(e);\r\n        }\r\n\r\n    }\r\n    async push (path,data, dataUpdate){\r\n        try {\r\n            await firebaseWeb.ref(path).push(data).then((snap)=>{\r\n                    const key = snap.key;\r\n                    this.send (`${path}/${key}/key`, key\r\n                    );\r\n                }\r\n            );\r\n        }\r\n        catch(e){\r\n            alert(e);\r\n        }\r\n    }\r\n    async update  (path,key,data){\r\n        try {\r\n            this.send (`${path}/${key}/key`, data\r\n            );\r\n        }\r\n        catch(e){\r\n            alert('error');\r\n        }\r\n\r\n    }\r\n\r\n}\r\nexport default new  Firebase();\r\n","import firebase from \"firebase\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyB2cDf18iTsAX749V43mfZj8OWSQN0yitw\",\r\n    authDomain: \"ieltsgroup-cc249.firebaseapp.com\",\r\n    projectId: \"ieltsgroup-cc249\",\r\n    storageBucket: \"ieltsgroup-cc249.appspot.com\",\r\n    messagingSenderId: \"893210685985\",\r\n    appId: \"1:893210685985:web:9496dbe699f381ac19e960\",\r\n    measurementId: \"G-DYH06V8FB0\"\r\n};\r\nexport const FirebaseWeb = firebase.initializeApp(firebaseConfig);\r\n","import  React, {useState} from 'react';\n\nimport { StyleSheet,\n        TextInput,\n        Button,\n    TouchableOpacity,\n    ViewStyle,\n    Alert,\n    FlatList,\n    Linking,\n    Clipboard,\n    ScrollView,\n    SafeAreaView,\n    Dimensions\n} from 'react-native';\n\nimport WebView from \"react-native-webview/lib/WebView\";\nimport HyperLink from \"react-native-hyperlink\";\nimport {Divider} from 'react-native-elements';\nimport {AntDesign, Ionicons} from '@expo/vector-icons';\nimport {SafeAreaProvider} from \"react-native-safe-area-context\";\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\nimport Firebase from \"../firebase/Firebase\";\nimport * as Console from \"console\";\n\n\nexport default function TabOneScreen() {\n    const [link, setLink] = useState('');\n    const [pass,setPass] = useState('');\n    const [account, setAccount] = useState('');\n    const [password,setPassword] = useState('');\n    const [name,setName] = useState('');\n    const [moreHistory,setMoreHistory] = useState(false);\n    const [moreAccount,setMoreAccount] = useState(false);\n    const [histories , setHistories] = useState(null);\n    const [accounts , setAccounts] = useState(null);\n    const [iconMoreHistory,setIconMoreHistory] = useState('caretdown');\n    const [iconMoreAccount,setIconMoreAccount] = useState('caretdown');\n    async function UpdateLink(){\n        if(pass=='1702' && link != '' && name!= ''){\n          await  Firebase.send('Link',\n                {\n                    post: link,\n                    name: name,\n                    time: Firebase.timeStamp(new Date()) ,\n                }\n            )\n            await Firebase.push('Histories',\n                {\n                    post: link,\n                    name: name,\n                    time: Firebase.timeStamp(new Date()) ,\n                    key:'',\n                },\n                )\n\n        }\n        else if(link =='' || name == '' || pass =='' ){\n            alert('Không được để trống ... ')\n        }\n        else {alert('Mật khẩu không chính xác ...',)}\n    }\n    async function HistoryShow(){\n          await Firebase.listen(\n              'Histories',\n              'value',\n              async (snapshot)=>{\n                  if(snapshot.val() != null )\n                  {\n                      var arr = Object.values(snapshot.val());\n                      console.log(arr);\n                      setHistories(arr);\n                  }\n              }\n              )\n\n    }\n    async function MoreHistory(){\n\n         setMoreHistory(!moreHistory);\n         if(moreHistory ){\n             setIconMoreHistory('caretdown')\n         }\n         else {\n            await HistoryShow();\n             setIconMoreHistory('caretup');\n         }\n    }\n    async function AccountShow(){\n        await Firebase.listen(\n            'Accounts',\n            'value',\n            async (snapshot)=>{\n                if(snapshot.val() != null )\n                {\n                    var arr = Object.values(snapshot.val());\n                    console.log(arr);\n                    setAccounts(arr);\n                }\n            }\n        )\n\n    }\n    async function PushAccount(){\n        await Firebase.push('Accounts',\n            {\n                account: account,\n                password: password,\n                key:'',\n            },\n        )\n    }\n\n    async function MoreAccount(){\n\n        setMoreAccount(!moreAccount);\n        if(moreAccount ){\n            setIconMoreAccount('caretdown')\n        }\n        else {\n            await AccountShow();\n            setIconMoreAccount('caretup');\n        }\n    }\n    function Copy(value){\n        Clipboard.setString(value);\n        return Clipboard.getString();\n    }\n    const RenderHistories =({item}) =>{\n        return (\n            <View >\n                    <Text\n                         style={ { fontSize: 12 } }>{item.time} : {item.name} posted\n                        <Text  style = { { color: '#2980b9', fontSize: 12,} } onPress={()=> window.open(`${item.post}`, '_blank')}\n                        > {item.post}</Text>\n                    </Text>\n                <Divider style={{marginVertical: 10,}} />\n            </View>\n            )\n    }\n    const RenderAccount =  ({item, index})=> {\n        return (\n            <View>\n                <Text>{index.toString()}.</Text>\n                <View style={{marginLeft: 10, }}>\n                    <View style={{flexDirection: 'row', alignItems: 'center', marginVertical: 10}}>\n                        <Text>Tài Khoản: {item.account} </Text>\n                        <TouchableOpacity\n                            onPress={() => Copy(`${item.account}`)}\n                        >\n                            <AntDesign name={'copy1'} size={15}/>\n                        </TouchableOpacity>\n                    </View>\n                    <View style={{flexDirection: 'row', alignItems: 'center', marginVertical: 10}}>\n                        <Text>Mật Khẩu: {item.password} </Text>\n                        <TouchableOpacity\n                            onPress={() => Copy(`${item.password}`)}\n                        >\n                            <AntDesign name={'copy1'} size={15}/>\n                        </TouchableOpacity>\n                    </View>\n                </View>\n                <Divider style={{marginVertical: 10,}}/>\n            </View>\n        )\n    }\n    return (\n            <SafeAreaProvider>\n                <ScrollView style={{flex:1}}  >\n                    <View style={styles.container}>\n                        <Text style={styles.title}>Link Bài Viết :</Text>\n\n                        <View style={styles.formView}>\n                            <TextInput\n                                style={styles.input}\n                                value={link}\n                                onChangeText={(text)=>setLink(text)}\n\n                                placeholder={'Paste Link Here :))'}\n                            />\n                            <TextInput\n                                style={styles.input}\n                                value={pass}\n                                onChangeText={(text)=>setPass(text)}\n                                placeholder={'Password'}\n                                maxLength={6}\n                                secureTextEntry={true}\n                            />\n                            <TextInput\n                                style={styles.input}\n                                value={name}\n                                onChangeText={(text)=>setName(text)}\n                                placeholder={'Your Name'}\n                                maxLength={10}\n                            />\n                            <View style ={{ flexDirection:'row', alignSelf:'center', marginVertical:20}}>\n                                <Button title={\"Update\"}  onPress={ ()=>\n                                    UpdateLink()\n                                }/>\n\n                            </View>\n\n                        </View>\n                        <View  style={{width:'100%',alignItems:'flex-start', width:'70%',}}>\n                            <TouchableOpacity style={styles.formHistory}\n                                              onPress={()=>MoreHistory()}\n                            >\n                                <AntDesign name={`${iconMoreHistory}`} size={17} color=\"black\" />\n                                <Text style={{marginLeft:10, fontSize: 17, }}>History</Text>\n                            </TouchableOpacity>\n                            {moreHistory ?\n                                <FlatList\n                                    style={styles.flatListHistory}\n                                    inverted={true}\n                                    data={histories}\n                                    renderItem={RenderHistories}\n                                    keyExtractor={(item ,index) => index.toString()}\n\n                                />\n                                :null}\n\n                            <TouchableOpacity style={styles.formHistory}\n                                              onPress={()=>\n                                                  MoreAccount()\n                                              }\n                            >\n                                <AntDesign name={`${iconMoreAccount}`} size={17} color=\"black\" />\n                                <Text style={{marginLeft:10, fontSize: 17, }}>Account</Text>\n                            </TouchableOpacity>\n                            {moreAccount ?\n                                <View style={{borderWidth:1, width:'100%'}}>\n                                    <TextInput\n                                        style={styles.input}\n                                        value={account}\n                                        onChangeText={(text)=>setAccount(text)}\n                                        placeholder={'Account'}\n                                    />\n                                    <TextInput\n                                        style={styles.input}\n                                        value={password}\n                                        onChangeText={(text)=>setPassword(text)}\n                                        placeholder={'Password'}\n                                    />\n                                    <View style ={{ flexDirection:'row', alignSelf:'center', marginVertical:20, width: '70%'}}>\n                                        <Button\n                                            title={\"ADD\"}\n                                            onPress={ ()=>\n                                                PushAccount()\n                                            }\n\n                                        />\n\n                                    </View>\n\n                                    <FlatList\n                                        style={styles.flatListHistory}\n                                        data={accounts}\n                                        renderItem={\n                                            RenderAccount\n                                        }\n                                        keyExtractor={(item ,index) => index.toString()}\n                                    />\n                                </View>\n                                :null}\n                            <TouchableOpacity style={styles.formHistory}\n                                              onPress={()=>\n                                                  window.open('https://docs.google.com/spreadsheets/d/13Dz1Wq14kXnMUN-b8Uwkd-1JHwfJbmvRmUwv43EMEIY/edit?fbclid=IwAR1dIt8p3LQTgavUO-DNnZ3iJINTgTIUpHqQG00vbeDwxeT2Dsi2SE_icfI#gid=1279066307')\n                                              }\n                            >\n                                <Text  style={{marginLeft:10, fontSize: 17}}>Routine</Text>\n                                <AntDesign style={{marginLeft:10}} name=\"arrowsalt\" size={14} color=\"black\" />\n                            </TouchableOpacity>\n                        </View>\n\n\n                    </View>\n                    <View style={{alignItems:'center'}}>\n                        <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255i,0.1)\" />\n                        <Text style={{}}>\n                            © https://facebook.com/ieltsintelligent\n                        </Text>\n                    </View>\n                </ScrollView>\n            </SafeAreaProvider>\n\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n     minHeight: Dimensions.get('window').height,\n  },\n  formView: {\n    width:'100%',\n  },\n  input: {\n      borderWidth:1,\n      width:\"70%\",\n      alignSelf:'center',\n      height:50,\n      paddingLeft: 10,\n      marginVertical:10\n  },\n    button: {\n      marginHorizontal: 100\n    },\n    formHistory: {\n      flexDirection:'row',\n        alignItems:'center',\n        justifyContent:'flex-start',\n        width:'100%',\n        height:50,\n\n    },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n    flatListHistory: {\n      marginLeft: '5%'\n    },\n});\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import  React, {useState} from 'react';\nimport {\n    Button,\n    StyleSheet, TextInput,\n\n} from 'react-native';\nimport { WebView } from 'react-native-webview';\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  const [name,setName]= useState('');\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>TO DO LIST</Text>\n        <View style={styles.formView}>\n            <TextInput\n                style={styles.input}\n                value={name}\n                onChangeText={(text)=>setName(text)}\n                placeholder={'Type Name to Show :))'}\n            />\n            <Button\n                style={{borderWidth:1}}\n                title={\"Show\"}\n                onPress={ ()=>\n                {}\n                }\n            />\n        </View>\n\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabTwoScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n    formView: {\n      flexDirection:'row',\n        justifyContent:'space-between',\n        width:'50%',\n    },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n    input: {\n        borderWidth:1,\n        width:\"70%\",\n        alignSelf:'center',\n        paddingLeft: 10,\n        marginVertical:10,\n        height: 50\n    },\n});\n","/**\n * Learn more about createBottomTabNavigator:\n * https://reactnavigation.org/docs/bottom-tab-navigator\n */\n\nimport { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { BottomTabParamList, TabOneParamList, TabTwoParamList } from '../types';\n\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Post\"\n        style={{width: 300}}\n      tabBarOptions={{ activeTintColor: Colors[colorScheme].tint,\n\n      }}>\n      <BottomTab.Screen\n        name=\"Post\"\n        component={TabOneNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Conv\"\n        component={TabTwoNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: React.ComponentProps<typeof Ionicons>['name']; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst TabOneStack = createStackNavigator<TabOneParamList>();\n\nfunction TabOneNavigator() {\n  return (\n    <TabOneStack.Navigator>\n      <TabOneStack.Screen\n        name=\"TabOneScreen\"\n        component={TabOneScreen}\n        options={{ headerTitle: 'IELTS GROUP ' }}\n      />\n    </TabOneStack.Navigator>\n  );\n}\n\nconst TabTwoStack = createStackNavigator<TabTwoParamList>();\n\nfunction TabTwoNavigator() {\n  return (\n    <TabTwoStack.Navigator>\n      <TabTwoStack.Screen\n        name=\"TabTwoScreen\"\n        component={TabTwoScreen}\n        options={{ headerTitle: 'Timeline' }}\n      />\n    </TabTwoStack.Navigator>\n  );\n}\n","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      NotFound: '*',\n    },\n  },\n};\n","/**\n * If you are not familiar with React Navigation, check out the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator  />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false,  }}\n\n    >\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n    </Stack.Navigator>\n  );\n}\n","import 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme}  />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}